<!-- **************************************************************************
* Written by Michael Smith, Force2b, LLC: 01/07/2015
* Portions of this have been borrowed, with much gratitude, from 
* http://andyinthecloud.com/category/tooling-api/
* *****************************************************************************
* Re-usable VF Component /w Javascript using the Metadata API to retrieve 
* Salesforce custom field ID's for any object.
*
* Once retrieved, the Id's can be used to build a custom hacked Salesforce URL
* passing in default values for specific fields
*
* Notes: 
* - This code does not require that the domain be added to RemoteSites in the Org.
* - Use Javascript Remoting or an ActionFunction to pass the Id's into Apex, likely
*   passing the values through JSON.stringify(mdapi_customFieldIds);

Usage:
	mdapi_retrieveCustomFieldIdsForAnObject('Contact', function() { 
		// Do something with the fields if needed
		// Note that the object key is case sensitive by default
		var fieldID = mdapi_customFieldIds["Contact.My_Custom_Field__c"];
		// Example using jQuery to change the URL of a custom link to include
		// a custom field Id with a custom default value of "some default value"
		$(".someCustomLink").attr("href", $(".someCustomLink").attr("href") +
			"&" + fieldID + "=some+default+value");
	});

To retrieve custom Ids for multiple objects, and then pass the results back to 
an Apex controller via an Action Function:

Javascript:
	mdapi_retrieveCustomFieldIdsForAnObject('Contact', function() { 
		// Chaining the calls together using the callback method
		mdapi_retrieveCustomFieldIdsForAnObject('My_Custom_Object__c', function() { 
			handleCustomFieldIDs(JSON.stringify(mdapi_customFieldIds));
		});
	});

Visualforce:
	<c:FieldIdByObjectFromMetadata />
	<apex:actionFunction name="handleCustomFieldIDs" immediate="true" 
			action="{!handleCustomFieldIDs}" rerender="msgs">
		<apex:param name="fieldIds" assignTo="{!customFieldIdsJSON}" value="" />
	</apex:actionFunction>

Apex Controller:
	public String customFieldIdsJSON	{ get; set; }
	private Map<String, String> customFieldIds;
	public pageReference handleCustomFieldIDs() {
		// Convert the JSON Map into a Map of Object.Field__c ==> FieldId
		if (this.customFieldIdsJSON != null) {
			this.customFieldIds = (Map<String, String>)JSON.deserialize(customFieldIdsJSON, Map<String, String>.class);
		}
		return null;
	}
* 
*
******************************************************************************* -->
<apex:component layout="none" id="FieldIDsByObjectJS">

<apex:attribute name="useLowerCaseKeys" type="Boolean" default="False"
	required="False" description="Convert all fields to lowercase if this is passed as True" />
<apex:attribute name="use18CharacterIDs" type="Boolean" default="False"
	required="False" description="Return 18 character ID's for the fields instead 15" />
<apex:attribute name="APIVersion" type="String" default="32"
	required="False" description="Salesforce API Version to use" />

<script src="../../soap/ajax/{!APIVersion}.0/connection.js" type="text/javascript"></script>

<script>
	// The following is really only needed when ShowHeader='false' in the apex:page definition
	var __sfdcSessionId = '{!GetSessionId()}';

	// Global vars
	var sfdc_hostURL = document.location.host;
	var mdapi_allCustomObjects = {};	// custom_Object__c ==> customObjectId
	var mdapi_ObjectPrefixes = {};		// sObjectKeyPrefix => sObject.Name
	var mdapi_customFieldIds = {};		// sObject.customFieldName__c ==> customFieldId
	var mdapi_errorDetails;				// Any error message generated by the REST call

	/**
	 * Pass in an ObjectName (standard or custom) AND a callback function that is called
	 * with the resulting map of all custom fields and Id's for the object
	 */
	function mdapi_retrieveCustomFieldIdsForAnObject(object, fnCallBack) {
		
		// If the custom object and keyprefix Id's have not been previously
		// retrieved, then query all the custom object Id's and KeyPrevixes 
		// before continuing. This should only happen one time.
		mdapi_errorDetails = null;
		if (Object.keys(mdapi_allCustomObjects).length === 0) {

			// Step 1:
			// Get all sObject Key Prefixes in case the 'object' that is passed
			// is a key prefix version an actual object name.
			sforce.connection.init('{!GETSESSIONID()}', 'https://' + sfdc_hostURL); 
			sforce.connection.remoteFunction({
				url : "https://" + sfdc_hostURL + "/services/data/v{!APIVersion}.0/sobjects",
					requestHeaders: {"Authorization":"Bearer {!GETSESSIONID()}", 
						"Content-Type":"application/json"}, 
					method: "GET",
				onSuccess : function(response) {
					// console.log(response);
					var responseJSON = JSON.parse( response );
					for (var n = 0; n < responseJSON.sobjects.length; n++) {
						if (responseJSON.sobjects[n].keyPrefix !== null) {
							mdapi_ObjectPrefixes[responseJSON.sobjects[n].keyPrefix] = responseJSON.sobjects[n].name;
						}
					}

					// Step 2:
					// After all object keyPrefix values have been processed, then
					// get all Custom Object Id's
					sforce.connection.init('{!GETSESSIONID()}', 'https://' + sfdc_hostURL); 
					sforce.connection.remoteFunction({
						url : "https://" + sfdc_hostURL + "/services/data/v{!APIVersion}.0/tooling/query/?q=+Select+Id,DeveloperName+from+CustomObject",
							requestHeaders: {"Authorization":"Bearer {!GETSESSIONID()}", 
								"Content-Type":"application/json"}, 
							method: "GET",
						onSuccess : function(response) {
							// console.log(response);
							var responseJSON = JSON.parse( response );
							for (var n = 0; n < responseJSON.records.length; n++) {
								mdapi_allCustomObjects[responseJSON.records[n].DeveloperName] = (responseJSON.records[n].Id).substring(0,15);
							}

							// Step 3:
							// Call the method to get the field Id's for the requested object
							mdapi_getAllFieldsForObject(object, fnCallBack);
						},
						onFailure : function(response) {
							mdapi_errorDetails = response;
						}
					});
				},
				onFailure : function(response) {
					mdapi_errorDetails = response;
				}
			});
		} else {
			// Steps 1 and 2 were previously completed, so just
			// call the method to get the field Id's for the requested object
			mdapi_getAllFieldsForObject(object, fnCallBack);
		}
	}

	/**
	 * Internal function called by the main function above after the Object ID's are retrieved.
	 */
	function mdapi_getAllFieldsForObject(object, fnCallBack) {

		// if the value passed is a keyPrefix value (ex: "001") instead of an object name ("Account")
		// then convert the keyPrefix into an Object to use in the tooling api query
		if (object.length === 3) {
			object = mdapi_ObjectPrefixes[object];
		}

		// For custom objects, strip out '__c' from the object and then retrieve Object Id
		var objectId = object;
		if (objectId.slice(-3) === '__c') {			
			objectId = objectId.substring(0,objectId.length-3);
			objectId = mdapi_allCustomObjects[objectId];
		}

		var fieldIdLength = 15;
		if ({!use18CharacterIDs} === true) {
			fieldIdLength = 18;
		}

		sforce.connection.init('{!GETSESSIONID()}', 'https://' + sfdc_hostURL); 
		sforce.connection.remoteFunction({
			url : "https://" + sfdc_hostURL + "/services/data/v{!APIVersion}.0/tooling/query/?q=+Select+id,DeveloperName+from+CustomField+where+TableEnumOrId='" + objectId + "'",
			requestHeaders: {"Authorization":"Bearer {!GETSESSIONID()}", "Content-Type":"application/json"}, 
			method: "GET",
			onSuccess : function(response) {
				//console.log(response);
				var responseJSON = JSON.parse( response );
				for (var n = 0; n < responseJSON.records.length; n++) {
					var fieldName = object + '.' + responseJSON.records[n].DeveloperName + "__c";
					if ({!useLowerCaseKeys} === true) {
						fieldName = fieldName.toLowerCase();
					}
					mdapi_customFieldIds[fieldName] = (responseJSON.records[n].Id).substring(0,fieldIdLength);
				}
				if( typeof fnCallBack == "function" ) {
					fnCallBack(mdapi_customFieldIds);
				}
			},
			onFailure : function(response) {
				mdapi_errorDetails = response;
				if( typeof fnCallBack === "function" ) {
					fnCallBack(mdapi_customFieldIds);
				}
			}
		});
	};

</script>

</apex:component>